import asyncio
import psutil
from uuid import UUID

from bleak import BleakServer, BleakCharacteristic, BleakAdvertisingData

# define UUIDs for the service and characteristic
SERVICE_UUID = UUID("00000001-0000-0000-0000-000000000001")
CHARACTERISTIC_UUID = UUID("00000002-0000-0000-0000-000000000002")


# define the battery level characteristic
class BatteryLevelCharacteristic(BleakCharacteristic):
    def __init__(self):
        super().__init__(
            uuid=CHARACTERISTIC_UUID,
            flags=("read", "notify"),
            description="Battery Level",
            characteristic_value_type="uint8")

    @staticmethod
    async def read_value(_):
        return psutil.sensors_battery().percent


# define the PC Battery Service
class PCBatteryService:
    def __init__(self):
        self.server = BleakServer()
        self.server.add_service(
            SERVICE_UUID, primary=True,
            characteristics=[BatteryLevelCharacteristic()])

    def start(self):
        loop = asyncio.get_event_loop()
        loop.run_until_complete(self.server.start())

    def stop(self):
        loop = asyncio.get_event_loop()
        loop.run_until_complete(self.server.stop())


# create the BLE peripheral
battery_service = PCBatteryService()
advertising_data = BleakAdvertisingData(service_uuids=[str(SERVICE_UUID)], local_name="PC Battery")


async def advertise():
    while True:
        await battery_service.server.send_advertisement_data(advertising_data)
        await asyncio.sleep(0.2)


async def start():
    battery_service.start()
    await advertise()

event_loop = asyncio.get_event_loop()
event_loop.run_until_complete(start())
